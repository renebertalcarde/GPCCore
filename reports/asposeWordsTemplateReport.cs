using System;
using System.IO;
//using Microsoft.Office.Interop.Word;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Mvc;
using coreLib.Objects;
using System.Text;
using Aspose.Words;
using Aspose.Words.Drawing;
using Aspose.Words.Layout;
using System.Collections.Generic;
using System.Linq;
using coreLibWeb;

namespace reports.AsposeLib
{
    public delegate void CustomizeDocDelegate(object data, ref Document wordDoc);
    public delegate string GetTemplateFilenameDelegate(string reportType);

    public class ReportHeaderParams
    {
        public string ReportLogoPath;
        public string ReportHeader;
        public float ReportLogo_Width = 50;
        public float ReportLogo_Height = 50;

        public ReportHeaderParams(string appPath)
        {
            ReportLogoPath = Path.Combine(appPath, "Templates", "config", "logo.png");
            ReportHeader = Common.getDocContents(Path.Combine(appPath, "Templates", "config", "header.docx"));
        }
    }

    public class ReportFooterParams
    {
        public string ReportFootNote;

        public ReportFooterParams(string appPath)
        {
            ReportFootNote = Common.getDocContents(Path.Combine(appPath, "Templates", "config", "footnote.docx"));
        }
    }

    public static class Procs
    {
        public static double CurrentPos(Document doc, Node obj)
        {
            LayoutCollector collector = new LayoutCollector(doc);
            LayoutEnumerator enumerator = new LayoutEnumerator(doc);

            enumerator.Current = collector.GetEntity(obj);
            return doc.LastSection.PageSetup.PageHeight - enumerator.Rectangle.Bottom;
        }

        public static void SetDocProperties(ref Document doc, string applicationName, string author)
        {
            doc.BuiltInDocumentProperties.Title = applicationName + " Document";
            doc.BuiltInDocumentProperties.Subject = "System-generated document";
            doc.BuiltInDocumentProperties.Author = author;
        }

        public static void SetWorkbookProperties(ref Aspose.Cells.Workbook doc, string applicationName, string author)
        {
            doc.BuiltInDocumentProperties.Title = applicationName + " Document";
            doc.BuiltInDocumentProperties.Subject = "System-generated document";
            doc.BuiltInDocumentProperties.Author = author;
        }
    }

    public class objData
    {
        public string ApplicationName { get; set; } = "";
        public string ModuleName { get; set; } = "";
        public string ReportName { get; set; } = "";

        public string MaskString(string str = null)
        {
            if (string.IsNullOrEmpty(str))
            {
                str = "This document was generated by [appname] [module] system, on [datetime] (ReportName: [reportname])";
            }

            return str
                .Replace("[appname]", ApplicationName)
                .Replace("[module]", ModuleName)
                .Replace("[reportname]", ReportName)
                .Replace("[date]", DateTime.Today.ToString("MM-dd-yyyy"))
                .Replace("[datetime]", DateTime.Now.ToString("MM-dd-yyyy h:mm tt"));
        }
    }

    public class asposeWordsTemplateReport
    {
        private CustomizeDocDelegate CustomizeDocProc;
        private ReportHeaderParams HeaderParams;
        private ReportFooterParams FooterParams;
        private objData CustomData;

        public int dataId { get; set; }        

        public string tempFolder = HttpContext.Current.Server.MapPath("~/Temp");
        string templateFolder = HttpContext.Current.Server.MapPath("~/Templates");
        string sessionId = HttpContext.Current.Session.SessionID;
        public string customWorkingFilename = "";

        string reportType = "";
        object data;

        public bool dlWord = false;

        Document doc;

        string applicationName;
        string owner;

        public asposeWordsTemplateReport(CustomizeDocDelegate CustomizeDocProc = null, ReportHeaderParams HeaderParams = null, string applicationName = "", string owner = "", ReportFooterParams FooterParams = null, objData CustomData = null)
        {
            this.CustomizeDocProc = CustomizeDocProc;
            this.HeaderParams = HeaderParams;
            this.FooterParams = FooterParams;
            this.applicationName = applicationName;
            this.owner = owner;
            this.CustomData = CustomData ?? new objData();
        }

        public string GetMergedFile(string reportType, object data, bool dlWord = false, string fileNameSuffix = "out")
        {
            this.reportType = reportType;
            this.data = data;

            this.dlWord = dlWord;

            string workingFile = createTempWorkingFile();
            string mergedFile = mergeData(workingFile, fileNameSuffix);

            File.Delete(workingFile);

            return mergedFile;
        }

        public ActionResult DownloadFile(string dlFile, string fn)
        {
            FileStream stream = new FileStream(dlFile, FileMode.Open);
            byte[] arr = new byte[stream.Length];
            stream.Read(arr, 0, (int)stream.Length);
            stream.Close();

            File.Delete(dlFile);

            MemoryStream pdfStream = new MemoryStream();
            pdfStream.Write(arr, 0, arr.Length);
            pdfStream.Position = 0;

            if (dlWord)
            {
                HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment;filename=\"" + createDLFilename(fn) + ".docx\"");

                return new FileStreamResult(pdfStream, "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
            }
            else
            {
                return new FileStreamResult(pdfStream, "application/pdf");
            }
        }

        public ActionResult Get(string reportType, string fn, object data, bool dlWord = false, int officeId = -1)
        {
            try
            {
                if (officeId != -1)
                {
                    string templateFolder = HttpContext.Current.Server.MapPath("~/Templates");
                    string newReportType = string.Format("{0}_{1}", reportType, officeId);
                    string path = Path.Combine(templateFolder, newReportType + ".docx");

                    if (File.Exists(path))
                    {
                        reportType = newReportType;
                    }
                }

                string mergedFile = GetMergedFile(reportType, data, dlWord);
                return DownloadFile(mergedFile, fn);
            }
            catch (Exception ex)
            {
                return new Raw_ActionResult(ex.Message);
            }
        }

        public string GetReference(string reportType, object data, bool dlWord = false, string fileNameSuffix = "out", int officeId = -1)
        {
            if (officeId != -1)
            {
                string templateFolder = HttpContext.Current.Server.MapPath("~/Templates");
                string newReportType = string.Format("{0}_{1}", reportType, officeId);
                string path = Path.Combine(templateFolder, newReportType + ".docx");

                if (File.Exists(path))
                {
                    reportType = newReportType;
                }
            }

            return GetMergedFile(reportType, data, dlWord, fileNameSuffix);
        }

        private string createDLFilename(string fn)
        {
            string ret = "";

            string regex = @"[^\w\s\-\+]";

            string filename = Regex.Replace(fn, regex, "_");

            ret = string.Format("{0}-{1}-{2}",
                filename,
                reportType,
                DateTime.Now.ToString("yyMMddhhmmss")
                );

            return ret;
        }

        private string mergeData(string workingFile, string fileNameSuffix = "out")
        {
            doc = new Document(workingFile);

            //set logo, header text and footnote in header and footer sections
            setReportDoc(ref doc);

            //report-specific procedures
            if (CustomizeDocProc != null)
            {
                CustomizeDocProc(data, ref doc);
            }

            string outputFileName = Path.Combine(tempFolder, tempFilename(!dlWord, fileNameSuffix));

            Procs.SetDocProperties(ref doc, applicationName, owner);

            if (dlWord)
            {
                doc.Save(outputFileName);
            }
            else
            {
                doc.Save(outputFileName, SaveFormat.Pdf);
            }

            return outputFileName.ToString();
        }

        public void mergeFiles(string file1, string file2, bool keepPagingOfNewFile = false)
        {
            Document dest = new Document(file1);
            Document src = new Document(file2);

            src.FirstSection.PageSetup.SectionStart = SectionStart.NewPage;

            if (keepPagingOfNewFile)
            {
                src.FirstSection.PageSetup.PageStartingNumber = 1;
                src.FirstSection.PageSetup.RestartPageNumbering = true;
            }            

            dest.AppendDocument(src, ImportFormatMode.KeepSourceFormatting);

            Procs.SetDocProperties(ref dest, applicationName, owner);

            dest.Save(file1);

            File.Delete(file2);
        }

        private void setReportDoc(ref Document wordDoc)
        {
            List<string> fields = new List<string>();
            List<string> fieldValues = new List<string>();

            if (HeaderParams != null)
            {
                DocumentBuilder builder = new DocumentBuilder(wordDoc);
                builder.MoveToBookmark("companyLogo");
                builder.InsertImage(HeaderParams.ReportLogoPath, HeaderParams.ReportLogo_Width, HeaderParams.ReportLogo_Height);

                string hdr = CustomData.MaskString(HeaderParams.ReportHeader);

                fields.Add("companyheader");
                fieldValues.Add(hdr.StartsWith("\r") ? hdr.Substring(1) : hdr);
            }

            if (FooterParams != null)
            {
                string ftr = CustomData.MaskString(FooterParams.ReportFootNote);

                fields.Add("footnote");
                fieldValues.Add(ftr.StartsWith("\r") ? ftr.Substring(1) : ftr);
            }

            if (fields.Any())
            {
                wordDoc.MailMerge.Execute(fields.ToArray(), fieldValues.ToArray());
            }
        }

        private string createTempWorkingFile()
        {
            string sourceFile = Path.Combine(templateFolder, string.Format("{0}.docx", reportType));
            string destinationFile = Path.Combine(tempFolder, tempFilename(false));

            File.Copy(sourceFile, destinationFile, true);

            return destinationFile;
        }

        private string tempFilename(bool IsPdf, string suffix = "")
        {
            string suff = suffix == "" ? "" : "-" + suffix;
            string ext = IsPdf ? "pdf" : "docx";
            return string.Format("{0}-{1}{2}.{3}", string.IsNullOrEmpty(customWorkingFilename) ? sessionId : customWorkingFilename, reportType, suff, ext);
        }


    }

    public static class Common
    {
        public static string getDocContents(string path)
        {
            string ret = "";

            if (File.Exists(path))
            {
                Document wordDoc = new Document(path);
                ret = wordDoc.GetText();
            }

            return ret;
        }
        
    }
}