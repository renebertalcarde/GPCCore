@model string

@{ 
    bool value = Convert.ToBoolean(ViewData["value"]);
    string title = Convert.ToString(ViewData["title"]);
    bool disabled = Convert.ToBoolean(ViewData["disabled"]);
    string text = Convert.ToString(ViewData["text"]);
    string id = Convert.ToString(ViewData["id"]);
    string name = Convert.ToString(ViewData["name"]);
    string dataItem = Convert.ToString(ViewData["data-item"]);
    string inputValue = Convert.ToString(ViewData["input-value"]);
    string _class = Convert.ToString(ViewData["class"]);
    bool smallType = Convert.ToBoolean(ViewData["small-checkbox"]);

    object style = ViewData["style"];
    string styleValue = "display:block";

    if (style != null)
    {
        styleValue = Convert.ToString(style);
    }

    string _id = (Model ?? (id ?? "")).Replace(" ", "");
    string _name = (Model ?? (name ?? (id ?? ""))).Replace(" ", "");
}

<div style="@styleValue" class="checkbox-cont @_class">
    <input @(string.IsNullOrEmpty(_id) ? "" : "id=" + _id) @(string.IsNullOrEmpty(_name) ? "" : "name=" + _name) class="checkbox-style" type="checkbox" data-item="@dataItem" data-text="@text"
           @(disabled ? "disabled" : "") @(value ? "checked" : "") value="@(string.IsNullOrEmpty(inputValue) ? "True" : inputValue)" />
    <label for="@_id" class="checkbox-style-3-label @(smallType ? "checkbox-small" : "")" title="@title">
        @(string.IsNullOrEmpty(text) ? "" : (" " + text))
    </label>
</div>